
#conclusion: don’t use subprocess with threads in python. the ping_v3 works, but just a simple loop, not thread search “ping command thread python” for more ideas how to do it without waiting for all pings in linear form



#!/usr/bin/env python

# ping3 doc here ignores the size: https://github.com/kyan001/ping3
# but the result is strange, need to switch to subprocess and us OS' ping binaries to do the test

import socket
import time
import threading
import subprocess
import platform
import datetime
from ping3 import ping, verbose_ping


def logit(text):
    t = datetime.datetime.now()
    x = t - datetime.timedelta(microseconds=t.microsecond)

    f = open("/opt/app1/pinglogs.txt", 'a+')
    f.write(str(x)+" - "+str(text))
    f.write("\n")
    f.close()


def ping_v3(current_ip_address):
    # logit('# in ping_v3 metho, host: '+str(current_ip_address))
    try:

        #logit('##### going to call subprocess')
        process = subprocess.Popen(['timeout','1.5','ping', current_ip_address, '-c', '1',
                                    '-W', '1'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        #logit('##### going to call wait')
        returncode = process.wait()
        #logit('##### going to call read')
        res_text = process.stdout.read()

        #logit('# return code: '+str(returncode))
        #logit('# message: '+str(res_text))

        if returncode == 0:
            pass
        elif returncode == 1:
            logit('# no answer: '+str(current_ip_address))
            # logit('# message: '+str(res_text))

        elif returncode == 2:
            logit('# resolve failed: '+str(current_ip_address))
            # logit('# returncode: '+str(returncode))
            # logit('# message: '+str(res_text))
        else:
            logit('# net issue? '+str(current_ip_address)+ ' message: '+str(res_text)+ ' return code:'+str(returncode) )

    except Exception as e:
        logit('# exception for host: '+str(current_ip_address) + ' E: '+str(e))


def ping_v2(current_ip_address, threshold):
    try:
        output = subprocess.check_output(
            "ping -c 1 -W 2 {}".format(current_ip_address), shell=True, universal_newlines=True)
        if 'unreachable' in output:
            logit('unreachable - a: '+str(current_ip_address))
        else:
            pass
    except Exception as e:
        logit('unreachable - b: '+str(current_ip_address) + ' e: '+str(e))


def ping_v1(host, size, timeout, pingthreshold):
    res = ping(host, unit='ms', size=size, timeout=timeout, ttl=200)
    print('')
    res_verbose = verbose_ping(
        host, unit='ms', size=size, timeout=timeout, ttl=200, count=1)

    to_log = ' - ' + host + ' - '+str(size)+' bytes'

    if res is False:
        logit('Resolve Failed'+to_log)

    elif res is None:
        logit('Ping Failed'+to_log)

    elif res > pingthreshold:
        logit(str(round(res, 2))+to_log)

    elif res < pingthreshold:
        pass  # logit('# success res: '+str(res)+str(to_log))

    else:
        logit('UNCATEGORISED result: '+to_log)


if __name__ == '__main__':

    timeout = 3

    hosts = [
            #{'host': '192.168.0.4'},
            {'host': '192.168.0.9'},
            {'host': '192.168.0.1'},
            {'host': 'www.yahoo.com'},
            #{'host': 'www.amazon.com'},
            {'host': 'www.google.com'},
            #{'host': '8.8.4.4'},
            #{'host': '1.1.1.1'},
            #{'host': '8.8.8.8'},
            #{'host': 'www.alef.ir'},
            {'host': '4.2.2.4'},
            #{'host':'facebook.com'},
            ]

    while(1):

        try:
            '''
            # using v1, the rpi shows successful ping in tcpdump, but shows many None (ping failure)
            for host in hosts:
                t1=threading.Thread(target=ping_v1, args=(host['host'], 100, timeout, host['pingthreshold']))
                t1.start()
            '''

            '''
            # using v2, fails together
            for host in hosts:
                t1=threading.Thread(target=ping_v3, args=(host['host'],))
                t1.start()
            '''

            # using v3, testing...
            for host in hosts:
                time.sleep(0.3)
                ping_v3(host['host'])

            time.sleep(2)

            logit('----------going to ping multiple IPs after some sleep')

        except Exception as e:
            logit("Ping/socket error:"+str(e))
