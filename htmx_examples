HTML complete end-to-end examples - from ChatGPT

1. Simple AJAX Content Load
Frontend (HTML + HTMX):

html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTMX Example</title>
    <script src="https://unpkg.com/htmx.org@1.9.1"></script>
</head>
<body>
    <button hx-get="/get-data" hx-target="#content">Click to Load Content</button>
    <div id="content">
        <!-- Loaded content will be inserted here -->
    </div>
</body>
</html>
Backend (Flask):

python
Copy code
from flask import Flask, render_template_string

app = Flask(__name__)

@app.route('/')
def index():
    return render_template_string(open('index.html').read())

@app.route('/get-data')
def get_data():
    return '<p>Here is some dynamic content!</p>'

if __name__ == '__main__':
    app.run(debug=True)
This example demonstrates loading new content into the page when you click the button. To test this, create an HTML file with the frontend code above, and run the Flask backend.

2. Form Submission with HTMX
Frontend (HTML + HTMX):

html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTMX Form Submit</title>
    <script src="https://unpkg.com/htmx.org@1.9.1"></script>
</head>
<body>
    <h1>Submit a Form</h1>
    <form hx-post="/submit-form" hx-target="#response" hx-swap="outerHTML">
        <input type="text" name="username" placeholder="Your name" required>
        <button type="submit">Submit</button>
    </form>

    <div id="response">
        <!-- Response will appear here -->
    </div>
</body>
</html>
Backend (Flask):

python
Copy code
from flask import Flask, render_template_string, request

app = Flask(__name__)

@app.route('/')
def index():
    return render_template_string(open('form.html').read())

@app.route('/submit-form', methods=['POST'])
def submit_form():
    username = request.form.get('username')
    return f'<p>Thank you for submitting, {username}!</p>'

if __name__ == '__main__':
    app.run(debug=True)
In this example, when you submit the form, the backend sends a response back that updates the page with a thank-you message. You can test this by submitting a name.

3. Dynamic Content Loading and Append
Frontend (HTML + HTMX):

html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Load More Content</title>
    <script src="https://unpkg.com/htmx.org@1.9.1"></script>
</head>
<body>
    <button hx-get="/load-more" hx-target="#content" hx-swap="beforeend">
        Load More Content
    </button>

    <div id="content">
        <!-- New content will be appended here -->
    </div>
</body>
</html>
Backend (Flask):

python
Copy code
from flask import Flask, render_template_string

app = Flask(__name__)

@app.route('/')
def index():
    return render_template_string(open('load_more.html').read())

@app.route('/load-more')
def load_more():
    return '<p>Here is some more dynamic content!</p>'

if __name__ == '__main__':
    app.run(debug=True)
Clicking the "Load More Content" button will append more content to the page.

4. Polling for Real-Time Updates
Frontend (HTML + HTMX):

html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Polling Example</title>
    <script src="https://unpkg.com/htmx.org@1.9.1"></script>
</head>
<body>
    <div hx-get="/current-time" hx-trigger="load, every 5s" hx-target="#time">
        <!-- Current time will be updated here every 5 seconds -->
    </div>

    <div id="time">
        <!-- Current time will be shown here -->
    </div>
</body>
</html>
Backend (Flask):

python
Copy code
from flask import Flask
from datetime import datetime

app = Flask(__name__)

@app.route('/')
def index():
    return render_template_string(open('polling.html').read())

@app.route('/current-time')
def current_time():
    return f'<p>Current time: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>'

if __name__ == '__main__':
    app.run(debug=True)
This will show the current time on the page, updating every 5 seconds.

5. Modal Dialog with Dynamic Content
Frontend (HTML + HTMX):

html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modal Example</title>
    <script src="https://unpkg.com/htmx.org@1.9.1"></script>
</head>
<body>
    <button hx-get="/modal-content" hx-target="#modal" hx-trigger="click">
        Open Modal
    </button>

    <div id="modal" class="modal">
        <!-- Modal content will be inserted here -->
    </div>
</body>
</html>
Backend (Flask):

python
Copy code
from flask import Flask, render_template_string

app = Flask(__name__)

@app.route('/')
def index():
    return render_template_string(open('modal.html').read())

@app.route('/modal-content')
def modal_content():
    return '<div class="modal-content"><p>This is a dynamic modal!</p></div>'

if __name__ == '__main__':
    app.run(debug=True)
When you click the "Open Modal" button, the modal content is dynamically loaded.

6. Using hx-push-url to Update Browser History
Frontend (HTML + HTMX):

html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTMX History Example</title>
    <script src="https://unpkg.com/htmx.org@1.9.1"></script>
</head>
<body>
    <button hx-get="/page/1" hx-target="#content" hx-push-url="true">
        Load Page 1
    </button>
    <button hx-get="/page/2" hx-target="#content" hx-push-url="true">
        Load Page 2
    </button>

    <div id="content">
        <!-- Content will be loaded here -->
    </div>
</body>
</html>
Backend (Flask):

python
Copy code
from flask import Flask, render_template_string

app = Flask(__name__)

@app.route('/')
def index():
    return render_template_string(open('history.html').read())

@app.route('/page/1')
def page_1():
    return '<p>This is page 1</p>'

@app.route('/page/2')
def page_2():
    return '<p>This is page 2</p>'

if __name__ == '__main__':
    app.run(debug=True)
When you click on "Load Page 1" or "Load Page 2", the content changes, and the URL in the browser's address bar updates without a full page reload.

How to Test
Copy the frontend HTML code into a file (e.g., index.html or form.html).
Run the Flask backend by saving the backend Python code (e.g., app.py).
Run the Flask server using the following command:
bash
Copy code
python app.py
Open a browser and visit http://127.0.0.1:5000/ to test the examples.
These are real, working examples that will allow you to test HTMX and see how it interacts with the backend, enabling you to build dynamic, fast web applications without much JavaScript.
